{"version":3,"sources":["components/Navbar/NavbarElements.jsx","components/Navbar/index.jsx","pages/Home.jsx","components/Extras/TableFromJSON.jsx","infrastructure.js","components/Items/JobDisplay.jsx","pages/Dashboard.jsx","components/Extras/CodeMirrorComponent.jsx","pages/Jobs.jsx","pages/Tester.jsx","pages/SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","NavBtn","NavBtnLink","Navbar","to","src","alt","activeStyle","Home","style","display","justifyContent","alignItems","height","TableFromJSON","tBody","json","keyList","useState","jsonObject","Array","getKeysFunction","_","spread","union","map","Object","keys","console","log","element","key","entries","entry","JSON","stringify","Table","striped","bordered","hover","size","infrastructure","Promise","resolve","reject","axios","get","then","d","data","catch","err","getInfrastructure","JobDisplay","job","resume","setResume","paramsOpen","setParamsOpen","processorsResult","setProcessorsResults","a","post","h0ck_core","id","result","resultProcessors","all","resultProcessor","name","resultProcessed","useEffect","loadResult","Card","Header","title","Body","configuration","limits","configKey","Button","onClick","aria-controls","aria-expanded","Collapse","in","parametrizationGroups","paramGroup","parameters","status","currentExecutions","currentIndex","taskCount","ProgressBar","animated","variant","now","max","fields","field","fieldValue","count","variancesCount","resultProcessorResult","x","Dashboard","jobs","setJobs","loadJobs","setInterval","margin","width","CodeMirror","require","CodeMirrorComponent","type","defaultCode","code","setCode","options","mode","styleActiveLine","lineNumbers","lineWrapping","value","onChange","Jobs","paramsCount","setParamsCount","setFields","e","target","forEach","set","document","querySelector","getValue","response","error","codeMirror","setSize","Form","Group","controlId","Label","Control","placeholder","as","toRender","from","length","v","i","paramsRender","nextParam","newFields","Row","Col","Tester","codeMirrorsDOM","querySelectorAll","codeMirrorParams","codeMirrorInput","codeMirrorOutput","script","parse","config","setValue","class","SignUp","App","marginBottom","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f8f90df.chunk.js","sourcesContent":["import { FaBars } from 'react-icons/fa';\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const Nav = styled.nav`\r\n  background: #000;\r\n  height: 80px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0.5rem calc((100vw - 1000px) / 2);\r\n  z-index: 10;\r\n\r\n  /* Third Nav */\r\n  /* justify-content: flex-start; */\r\n`;\r\n\r\nexport const NavLink = styled(Link)`\r\n  color: #fff;\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  cursor: pointer;\r\n\r\n  &.active {\r\n    color: #15cdfc;\r\n  }\r\n`;\r\n\r\nexport const Bars = styled(FaBars)`\r\n  display: none;\r\n  color: #fff;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translate(-100%, 75%);\r\n    font-size: 1.8rem;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const NavMenu = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: -24px;\r\n\r\n  /* Second Nav */\r\n  /* margin-right: 24px; */\r\n\r\n  /* Third Nav */\r\n  /* width: 100vw;\r\n  white-space: nowrap; */\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtn = styled.nav`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 24px;\r\n\r\n  /* Third Nav */\r\n  /* justify-content: flex-end;\r\n  width: 100vw; */\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtnLink = styled(Link)`\r\n  border-radius: 4px;\r\n  background: #256ce1;\r\n  padding: 10px 22px;\r\n  color: #fff;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n\r\n  /* Second Nav */\r\n  margin-left: 24px;\r\n\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #010606;\r\n  }\r\n`;","\r\n  \r\nimport React from 'react';\r\nimport {\r\n  Nav,\r\n  NavLink,\r\n  Bars,\r\n  NavMenu,\r\n  NavBtn,\r\n  NavBtnLink\r\n} from './NavbarElements';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <Nav>\r\n        <NavLink to='/'>\r\n          <img src={process.env.PUBLIC_URL + '/images/h0ck-logo.png'} alt='logo' />\r\n        </NavLink>\r\n        <Bars />\r\n        <NavMenu>\r\n          <NavLink to='/dashboard' activeStyle>\r\n            Dashboard\r\n          </NavLink>\r\n          <NavLink to='/jobs' activeStyle>\r\n            Jobs\r\n          </NavLink>\r\n          <NavLink to='/tester' activeStyle>\r\n            Tester\r\n          </NavLink>\r\n          <NavLink to='/sign-up' activeStyle>\r\n            Sign Up\r\n          </NavLink>\r\n          {/* Second Nav */}\r\n          {/* <NavBtnLink to='/sign-in'>Sign In</NavBtnLink> */}\r\n        </NavMenu>\r\n        <NavBtn>\r\n          <NavBtnLink to='/signin'>Sign In</NavBtnLink>\r\n        </NavBtn>\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '90vh'\r\n      }}\r\n    >\r\n      <h1>Home</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\n\r\nimport { Card, ProgressBar, Table } from 'react-bootstrap'\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nconst TableFromJSON = ({ json }) => {\r\n    let keyList = [];\r\n    const [jsonObject, setJsonObject] = useState(json);\r\n        let arrayMode = json instanceof Array;\r\n        let tBody;\r\n        if (arrayMode){\r\n            const getKeysFunction = _.spread(_.union);\r\n           keyList = getKeysFunction(jsonObject.map(Object.keys))\r\n           console.log(keyList)\r\n           tBody = json.map(element=>{\r\n               return <tr>{keyList.map(key=>{ return <td>{element[key]}</td>})}</tr>\r\n           })\r\n           \r\n        } else {\r\n           tBody = jsonObject && Object.entries(jsonObject).map(entry => {\r\n                return <tr>\r\n                    <td>{entry[0]}</td>\r\n                    <td>{JSON.stringify(entry[1])}</td>\r\n                </tr>\r\n        })}\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                   { keyList.map(key=><th>{key}</th>)}\r\n              \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tBody}\r\n            </tbody>\r\n\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\nexport default TableFromJSON;","import axios from 'axios';\r\n\r\n\r\nlet infrastructure = new Promise((resolve, reject)=>{\r\n    axios.get(\"./infrastructure.json\").then(d=>{resolve(d.data)}).catch(err=>reject(err));\r\n})\r\n\r\n\r\n\r\nexport default function getInfrastructure(){\r\n    return infrastructure;\r\n};\r\n","\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, ProgressBar, Table, Button, Collapse } from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport TableFromJSON from '../Extras/TableFromJSON';\r\nimport getInfrastructure from '../../infrastructure';\r\n\r\n\r\nconst JobDisplay = ({ job }) => {\r\n\r\n    const [resume, setResume] = useState([])\r\n    const [paramsOpen, setParamsOpen] = useState(false)\r\n    const [processorsResult, setProcessorsResults] = useState([])\r\n\r\n    async function loadResult() {\r\n        let infrastructure = await getInfrastructure();\r\n        axios.post(infrastructure.h0ck_core + \"/api/v1/jobs/\" + job.id + \"/resultProcessors/resumeVariances/process\").then(result => {\r\n            setResume(result.data)\r\n            console.log(result.data)\r\n        });\r\n\r\n        if (job.resultProcessors){\r\n            let processorsResult = await Promise.all(job.resultProcessors.map(async (resultProcessor) => {\r\n                let resultProcessed = (await axios.post(infrastructure.h0ck_core  + \"/api/v1/jobs/\" + job.id + \"/resultProcessors/\" + resultProcessor.name + \"/process\")).data\r\n                return { name: resultProcessor.name, result: resultProcessed }\r\n            }))\r\n            setProcessorsResults(processorsResult)\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        loadResult()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Header>\r\n                    {job.title}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    ID:\r\n                    <p>{job.id}</p>\r\n                    <h5>Configuration:</h5>\r\n                    {Object.keys(job.configuration.limits).map(configKey => {\r\n                        return <div>{configKey + \": \" + JSON.stringify(job.configuration.limits[configKey])}</div>\r\n                    })}\r\n                    <br></br>\r\n                    <h5>Parametrization Groups:</h5>\r\n                    <Button\r\n                        onClick={() => setParamsOpen(!paramsOpen)}\r\n                        aria-controls=\"paramsCollapse\"\r\n                        aria-expanded={paramsOpen}>\r\n                        ⬇\r\n                    </Button>\r\n                    <Collapse in={paramsOpen}>\r\n                        <div id=\"paramsCollapse\">\r\n                            {job.parametrizationGroups.map(paramGroup => {\r\n                                return <TableFromJSON json={paramGroup.parameters}></TableFromJSON>\r\n                            })}\r\n                        </div>\r\n                    </Collapse>\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                    <h5>Status:</h5>\r\n                    Current executions: {job.status.currentExecutions}\r\n                    <br></br>\r\n                    Progress: {job.status.currentIndex}/{job.taskCount}\r\n                    <br></br>\r\n                    <ProgressBar animated={job.status.currentIndex !== job.taskCount} variant=\"success\" now={job.status.currentIndex} max={job.taskCount}></ProgressBar>\r\n\r\n                    <br></br>\r\n                    <h5>Results:</h5>\r\n                    <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Field</th>\r\n                                <th>Count</th>\r\n                                <th>Variances</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                resume?.fields && Object.keys(resume?.fields).map(field => {\r\n                                    let fieldValue = resume.fields[field];\r\n                                    return <tr>\r\n                                        <td>{field}</td>\r\n                                        <td>{fieldValue.count}</td>\r\n                                        <td>{fieldValue.variancesCount}</td>\r\n                                        <td>--</td>\r\n                                    </tr>\r\n                                })}\r\n                        </tbody>\r\n\r\n                    </Table>\r\n\r\n\r\n                    {processorsResult.map(resultProcessorResult => {\r\n                        return <div>\r\n                            <h4>{resultProcessorResult.name}</h4>\r\n                            <TableFromJSON json={resultProcessorResult.result}></TableFromJSON>\r\n                        </div>\r\n                    }\r\n                    )}\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            <br></br>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default JobDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport JobDisplay from '../components/Items/JobDisplay'\r\nimport getInfrastructure from '../infrastructure';\r\n\r\ngetInfrastructure().then(x=>{\r\n  console.log(x)\r\n})\r\n\r\n\r\nconst Dashboard = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n\r\n  async function loadJobs() {\r\n    let infrastructure = await getInfrastructure();\r\n    axios.get(infrastructure.h0ck_core  + \"/api/v1/jobs\").then(async(jobs) => {\r\n      setJobs(jobs.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadJobs()\r\n    setInterval(loadJobs, 1500)\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        margin: 'auto',\r\n        width: '50%',\r\n      }}\r\n    >\r\n      <h1>Dashboard</h1>\r\n      {jobs?.map(job => {\r\n        return <JobDisplay key={job.id} job={job}></JobDisplay>\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import React, { useState } from \"react\";\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nvar CodeMirror = require('react-codemirror');\r\n\r\nconst CodeMirrorComponent = ({ id, type,  defaultCode }) => {\r\n    const [code, setCode] = useState(defaultCode);\r\n    const style = {\r\n            \"text-align\": \"left\",\r\n    }\r\n\r\n    var options = {\r\n        mode: type,\r\n        styleActiveLine: true,\r\n        lineNumbers: true,\r\n        lineWrapping: true,\r\n    };\r\n    return (\r\n        <div style={style}>\r\n            <CodeMirror id={id} value={code} onChange={setCode} options={options} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CodeMirrorComponent;","import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, InputGroup, FormLabel, Dropdown, Card, Row, Col } from 'react-bootstrap';\r\nimport CodeMirrorComponent from '../components/Extras/CodeMirrorComponent';\r\nimport _ from 'lodash';\r\nimport axios from 'axios';\r\nimport getInfrastructure from '../infrastructure';\r\n\r\n\r\nconst Jobs = () => {\r\n\r\n  let [paramsCount, setParamsCount] = useState(1);\r\n  const [fields, setFields] = useState(\r\n    {\r\n      \"title\": \"My Job title\",\r\n      \"framework\": \"h0ck-framework-testing\",\r\n      \"configuration.limits.parallelExecutions\": \"10\",\r\n      \"configuration.limits.requestPerSecond\": \"1\",\r\n      \"configuration.limits.virtualUserExecutions\": \"1\",\r\n      \"parametrizationGroups[0].parameters[0].name\": \"param1\",\r\n      \"parametrizationGroups[0].parameters[0].type\": \"list\",\r\n      \"parametrizationGroups[0].parameters[0].definition\": \"valueParam1, valueParam2, valueParam2\"\r\n    }\r\n  );\r\n\r\n  function onChange(e) {\r\n\r\n    setFields({ ...fields, [e.target.name]: e.target.value })\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Actualiza el título del documento usando la API del navegador\r\n    let codeMirror = document.querySelector(\".CodeMirror\").CodeMirror;\r\n    if (codeMirror) {\r\n      codeMirror.setSize(600, 200)\r\n    }\r\n    console.log(fields)\r\n\r\n\r\n  });\r\n\r\n\r\n  function addParam() {\r\n    let nextParam = paramsCount +1;\r\n    let newFields = {}\r\n    newFields[\"parametrizationGroups[0].parameters[\" + paramsCount + \"].name\"] = \"param\" + nextParam\r\n    newFields[\"parametrizationGroups[0].parameters[\" + paramsCount + \"].type\"] = \"list\"\r\n    newFields[\"parametrizationGroups[0].parameters[\" + paramsCount + \"].definition\"] = \"valueParam\" + nextParam\r\n    setFields({\r\n      ...fields, ...newFields})\r\n\r\n    setParamsCount(nextParam)\r\n\r\n  }\r\n\r\n  function removeParam() {\r\n    if (paramsCount < 2) {\r\n      //TODO: Move to alert bootstrap\r\n      console.log(\"You should have 1 param at least\");\r\n      return;\r\n    }\r\n    setParamsCount(paramsCount - 1)\r\n  }\r\n\r\n  async function createJob() {\r\n    let infrastructure = await getInfrastructure();\r\n    let job = {};\r\n    console.log(job)\r\n    Object.entries(fields).forEach((entry) => {\r\n      _.set(job, entry[0], entry[1]);\r\n    })\r\n    job.code = document.querySelector(\".CodeMirror\").CodeMirror.getValue();\r\n    axios.post(infrastructure.h0ck_core  + \"/api/v1/jobs\", job).then(response => {\r\n      console.log(\"Job created: \", response)\r\n    }).catch(err => {\r\n      console.error(\"Error creating JOB: \" + err);\r\n    })\r\n    console.log(job);\r\n  }\r\n\r\n\r\n  const paramsRender = () => {\r\n    let arrayParamsCount = Array.from({ length: paramsCount }, (v, i) => i)\r\n\r\n    let toRender = arrayParamsCount.map(value => {\r\n\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Card.Body>\r\n              <Form.Label>Param name</Form.Label>\r\n              <Form.Control onChange={onChange} value={fields[\"parametrizationGroups[0].parameters[\" + value + \"].name\"]} name={\"parametrizationGroups[0].parameters[\" + value + \"].name\"} size=\"sm\" type=\"text\" placeholder={\"param\" + value} />\r\n              <Form.Label>Param Source Type</Form.Label>\r\n              <Form.Control onChange={onChange} value={fields[\"parametrizationGroups[0].parameters[\" + value + \"].type\"]} name={\"parametrizationGroups[0].parameters[\" + value + \"].type\"} size=\"sm\" as=\"select\">\r\n                <option value=\"list\">List</option>\r\n                <option value=\"urlList\">List from URL</option>\r\n                <option value=\"ranges\">Ranges</option>\r\n              </Form.Control>\r\n              <Form.Label>Param definition</Form.Label>\r\n              <Form.Control onChange={onChange} value={fields[\"parametrizationGroups[0].parameters[\" + value + \"].definition\"]} name={\"parametrizationGroups[0].parameters[\" + value + \"].definition\"} size=\"sm\" type=\"text\" placeholder=\"param1, param2, param3 || URL || 0-100, 300-500\" />\r\n            </Card.Body>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      )\r\n    })\r\n\r\n\r\n    return (\r\n      <div>\r\n        {toRender}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        margin: 'auto',\r\n        width: '50%',\r\n      }}\r\n    >\r\n      <h3>Create a Job</h3>\r\n      <Form id=\"FORM1\">\r\n\r\n        <Form.Group controlId=\"formJobTitle\">\r\n          <Form.Label>Title</Form.Label>\r\n          <Form.Control onChange={onChange} value={fields[\"title\"]} name={\"title\"} size=\"sm\" type=\"text\" placeholder=\"My job title\" />\r\n        </Form.Group>\r\n        <br></br>\r\n        <Form.Label>Framework</Form.Label>\r\n        <Form.Control onChange={onChange} value={fields[\"framework\"]} name={\"framework\"} size=\"sm\" as=\"select\">\r\n                <option value=\"h0ck-framework-testing\">Testing Framework</option>\r\n                <option value=\"h0ck-framework-scraping\">Scraping Framework</option>\r\n                <option value=\"h0ck-framework-core\">Core Framework</option>\r\n              </Form.Control>\r\n        <br></br>\r\n        <Form.Label>Code</Form.Label>\r\n        <CodeMirrorComponent type={'javascript'} defaultCode={\"module.exports.main = async function(params){ \\n return params \\n }\"}></CodeMirrorComponent>\r\n\r\n        <Form.Label><h4>Parametrization</h4></Form.Label>\r\n        <br></br>\r\n        {paramsRender()}\r\n\r\n        <Button onClick={addParam} size=\"sm\">Add param</Button>\r\n        <Button onClick={removeParam} variant=\"danger\" size=\"sm\">Remove param</Button>\r\n        <br></br>\r\n        <br></br>\r\n\r\n        <Form.Group controlId=\"formJobConfig\">\r\n          <Form.Label><h4>Configuration</h4></Form.Label>\r\n          <br></br>\r\n          <Card>\r\n            <Card.Body>\r\n\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>Max Parallel Executions</Form.Label>\r\n                    <Form.Control onChange={onChange} value={fields[\"configuration.limits.parallelExecutions\"]} name={\"configuration.limits.parallelExecutions\"} size=\"sm\" type=\"number\" placeholder=\"10\" />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>Max executions per virtual user / IP</Form.Label>\r\n                    <Form.Control onChange={onChange} value={fields[\"configuration.limits.virtualUserExecutions\"]} name={\"configuration.limits.virtualUserExecutions\"} size=\"sm\" type=\"number\" placeholder=\"10\" />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <br></br>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>N of Requests per [time unit]</Form.Label>\r\n                    <Form.Control onChange={onChange} value={fields[\"configuration.limits.requestPerSecond\"]} name={\"configuration.limits.requestPerSecond\"} size=\"sm\" type=\"number\" placeholder=\"10\" />\r\n\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>Time Unit</Form.Label>\r\n\r\n                    <Form.Control size=\"sm\" as=\"select\">\r\n                      <option value=\"seconds\">Seconds</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Form.Group>\r\n        <br></br>\r\n        <Button onClick={createJob}>Create Job</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jobs;","import React from 'react';\r\nimport CodeMirrorComponent from '../components/Extras/CodeMirrorComponent';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\n\r\nconst Tester = () => {\r\n\r\n  async function executeLamda(){\r\n\r\n    let codeMirrorsDOM = document.querySelectorAll('.CodeMirror');\r\n    var codeMirrorParams = codeMirrorsDOM[0].CodeMirror;\r\n    var codeMirrorInput = codeMirrorsDOM[1].CodeMirror;\r\n    var codeMirrorOutput = codeMirrorsDOM[2].CodeMirror;\r\n\r\n    console.log('Executing lambda')\r\n    console.log(codeMirrorInput.getValue())\r\n    await axios.post('https://bpqkym2894.execute-api.eu-west-3.amazonaws.com/default/scriptExecutor', {\r\n        script: JSON.parse(JSON.stringify(codeMirrorInput.getValue())),\r\n        config: codeMirrorParams.getValue()\r\n    }).then(response=>{\r\n      codeMirrorOutput.setValue(response.data);\r\n    }).catch((err)=>{\r\n      codeMirrorOutput.setValue(JSON.stringify(err));\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        margin: 'auto',\r\n        width: '50%'\r\n      }}\r\n    >\r\n      <h1>Tester</h1>\r\n      <h2> Input params: </h2>\r\n      <CodeMirrorComponent id=\"codeInput\" type={'javascript'} defaultCode={'{\"param1\": \"value1\", \"param2\": \"value2\"}'}></CodeMirrorComponent>\r\n      <h2> Code: </h2>\r\n      <CodeMirrorComponent type={'javascript'} defaultCode={\"module.exports.main = async function(params){ \\n return 'Hello World!' \\n }\"}></CodeMirrorComponent>\r\n      <Button type=\"button\" onClick={executeLamda} class=\"btn btn-primary\">Execute</Button>\r\n      <CodeMirrorComponent id=\"codeOutput\" type={'javascript'} defaultCode={\"Hello World!\"}></CodeMirrorComponent>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tester;","import React from 'react';\r\n\r\nconst SignUp = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '90vh'\r\n      }}\r\n    >\r\n      <h1>SignUp</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Dashboard from './pages/Dashboard'\nimport Jobs from './pages/Jobs'\nimport Tester from './pages/Tester'\nimport SignUp from './pages/SignUp'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App() {\n\n  const appStyle= {\n    marginBottom: \"50px\",\n  }\n\n  return (\n    <Router>\n      <div style={appStyle}>\n      <Navbar />\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/dashboard' component={Dashboard} />\n        <Route path='/jobs' component={Jobs} />\n        <Route path='/tester' component={Tester} />\n        <Route path='/sign-up' component={SignUp} />\n        \n      </Switch>\n      </div>\n      <div class=\"footer\">\n        </div>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}